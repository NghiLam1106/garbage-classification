import streamlit as st  # type: ignore
import tensorflow as tf
import tempfile
from tensorflow.keras.applications.mobilenet_v3 import preprocess_input # type: ignore
import numpy as np


@st.cache_resource
def load_model():
    # Load the pre-trained model
    model = tf.keras.models.load_model("garbage-classification.keras")
    return model


def model_prediction(test_image_path):
    model = load_model()
    image = tf.keras.preprocessing.image.load_img(
        test_image_path, target_size=(400, 400)
    )

    x = tf.keras.utils.img_to_array(image)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    prediction = model.predict(x)

    return np.argmax(prediction)


st.sidebar.title("Dashboard")
app_mode = st.sidebar.selectbox(
    "Select Page", ["Garbage identification"]
)


if app_mode == "Garbage identification":
    st.header("Ch√†o m·ª´ng ƒë·∫øn v·ªõi trang Ph√¢n lo·∫°i r√°c th·∫£i")

    # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh
    st.subheader("üîç Ch·ªçn c√°ch nh·∫≠p ·∫£nh")
    input_method = st.radio(
        "B·∫°n mu·ªën s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p n√†o?",
        ["üìÅ T·∫£i ·∫£nh t·ª´ m√°y", "üì∑ Ch·ª•p ·∫£nh t·ª´ webcam"],
    )

    test_image = None
    captured_image = None
    temp_file_path = None

    if input_method == "üìÅ T·∫£i ·∫£nh t·ª´ m√°y":
        test_image = st.file_uploader(
            "T·∫£i ·∫£nh t·ª´ thi·∫øt b·ªã", type=["jpg", "jpeg", "png"]
        )
    elif input_method == "üì∑ Ch·ª•p ·∫£nh t·ª´ webcam":
        captured_image = st.camera_input("Ch·ª•p ·∫£nh tr·ª±c ti·∫øp t·ª´ webcam")

    # ∆Øu ti√™n ·∫£nh upload n·∫øu c√≥
    image = test_image if test_image is not None else captured_image

    if image is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
            tmp_file.write(image.read())
            temp_file_path = tmp_file.name

        st.image(temp_file_path, caption="·∫¢nh b·∫°n ƒë√£ ch·ªçn", use_container_width=True)
        # Predict button
        if st.button("Predict"):
            with st.spinner("Please Wait.."):
                result_index = model_prediction(temp_file_path)
                # Reading Labels
                class_name = ['battery',
                    'biological',
                    'cardboard',
                    'clothes',
                    'glass',
                    'metal',
                    'paper',
                    'plastic',
                    'shoes',
                    'trash']

            st.success("Model is Predicting it's a {}".format(class_name[result_index]))

            with st.expander("ƒê·ªçc th√™m"):
                st.write("D·ª± ƒëo√°n :")
                # battery
                if result_index == 0:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† pin thu·ªôc nh√≥m "R√°c th·∫£i ƒëi·ªán t·ª≠".*
                        """
                    )
                    st.image(image)
                # biological
                if result_index == 1:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† th·ª±c ph·∫©m th·ª´a, v·ªè tr√°i c√¢y, rau c·ªß thu·ªôc nh√≥m "R√°c th·∫£i h·ªØu c∆°".*
                        """
                    )
                    st.image(image)
                # cardboard
                if result_index == 2:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† b√¨a c·ª©ng thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø".*
                        """
                    )
                    st.image(image)
                # clothes
                if result_index == 3:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† v·∫£i thu·ªôc nh√≥m "R√°c th·∫£i c√¥ng nghi·ªáp".*
                        """
                    )
                    st.image(image)
                # glass
                if result_index == 4:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† th·ªßy tinh thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø".*
                        """
                    )
                    st.image(image)
                # metal
                if result_index == 5:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† v·∫≠t d·ª•ng kim lo·∫°i thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø ho·∫∑c R√°c th·∫£i c√¥ng nghi·ªáp".*
                        """
                    )
                    st.image(image)
                # paper
                if result_index == 6:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† gi·∫•y thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø".*
                        """
                    )
                    st.image(image)
                # plastic
                if result_index == 7:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† th·ªßy tinh thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø ho·∫∑c R√°c th·∫£i sinh ho·∫°t".*
                        """
                    )
                    st.image(image)
                # shoes
                if result_index == 8:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† gi√†y thu·ªôc nh√≥m "R√°c th·∫£i t√°i ch·∫ø ho·∫∑c R√°c th·∫£i sinh ho·∫°t".*
                        """
                    )
                    st.image(image)
                # trash
                if result_index == 9:
                    st.write(
                        """
                        ·∫¢nh ch·ª•p cho th·∫•y ƒë√¢y l√† r√°c th·∫£i h·ªón h·ª£p thu·ªôc nh√≥m "R√°c th·∫£i sinh ho·∫°t".*
                        """
                    )
                    st.image(image)

